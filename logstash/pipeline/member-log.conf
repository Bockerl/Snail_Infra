input {
  kafka {
    bootstrap_servers => "kafka:29092"
    topics => ["member-log-events"]
    group_id => "snail-member"
    codec => "plain"
  }
}

filter {
  json {
    source => "message"
    target => "parsed_json"
  }

    # 2. parsed_json 필드를 다시 파싱해서 진짜 필드로 풀어버리기
  json {
    source => "parsed_json"
  }


  mutate {
    rename => {
      "[parsed_json][memberId]" => "memberId"
      "[parsed_json][timestamp]" => "timestamp"
      "[parsed_json][eventType]" => "eventType"
      "[parsed_json][ipAddress]" => "ipAddress"
      "[parsed_json][userAgent]" => "userAgent"
      "[parsed_json][memberEmail]" => "memberEmail"
      "[parsed_json][memberPhoneNumber]" => "memberPhoneNumber"
      "[parsed_json][memberNickname]" => "memberNickname"
      "[parsed_json][memberPhoto]" => "memberPhoto"
      "[parsed_json][memberStatus]" => "memberStatus"
      "[parsed_json][memberLanguage]" => "memberLanguage"
      "[parsed_json][memberGender]" => "memberGender"
      "[parsed_json][memberRegion]" => "memberRegion"
      "[parsed_json][memberBirth]" => "memberBirth"
      "[parsed_json][signUpPath]" => "signUpPath"
    }
    remove_field => ["parsed_json", "message", "[event][original]"]
  }

    # timestamp 변환: 초 단위를 밀리초 정수로 변환
  ruby {
    code => '
      if event.get("timestamp")
        event.set("timestamp", (event.get("timestamp").to_f * 1000).to_i)
      end
    '
  }

  if [eventType] == "MEMBER_CREATE" {
    mutate { add_field => { "log_type" => "member_create" } }
  } else if [eventType] == "MEMBER_LOGIN" {
    mutate { add_field => { "log_type" => "member_login" } }
  } else if [eventType] == "MEMBER_UPDATE" {
    mutate { add_field => { "log_type" => "member_update" } }
  } else if [eventType] == "MEMBER_DELETE" {
    mutate { add_field => { "log_type" => "member_delete" } }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "member_log"
  }
  stdout { codec => rubydebug }
}